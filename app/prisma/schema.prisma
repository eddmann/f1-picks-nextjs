generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]

  picks Pick[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Round {
  year               Int
  round              Int
  name               String
  sprintQualifyingAt DateTime?
  sprintRaceAt       DateTime?
  raceQualifyingAt   DateTime
  raceAt             DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  picks   Pick[]
  results Result[]

  @@id(name: "roundId", [year, round])
}

model Driver {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  picks1   Pick[]   @relation("PickDriver1")
  picks2   Pick[]   @relation("PickDriver2")
  picks3   Pick[]   @relation("PickDriver3")
  results1 Result[] @relation("ResultDriver1")
  results2 Result[] @relation("ResultDriver2")
  results3 Result[] @relation("ResultDriver3")
}

model Pick {
  userId    String
  year      Int
  round     Int
  type      Type
  driver1Id Int
  driver2Id Int
  driver3Id Int
  score     Int?
  scoredAt  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user     User   @relation(fields: [userId], references: [id])
  roundRel Round  @relation(fields: [year, round], references: [year, round])
  driver1  Driver @relation(fields: [driver1Id], references: [id], name: "PickDriver1")
  driver2  Driver @relation(fields: [driver2Id], references: [id], name: "PickDriver2")
  driver3  Driver @relation(fields: [driver3Id], references: [id], name: "PickDriver3")

  @@id(name: "pickId", [userId, year, round, type])
}

model Result {
  year      Int
  round     Int
  type      Type
  driver1Id Int
  driver2Id Int
  driver3Id Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roundRel Round  @relation(fields: [year, round], references: [year, round])
  driver1  Driver @relation(fields: [driver1Id], references: [id], name: "ResultDriver1")
  driver2  Driver @relation(fields: [driver2Id], references: [id], name: "ResultDriver2")
  driver3  Driver @relation(fields: [driver3Id], references: [id], name: "ResultDriver3")

  @@id(name: "resultId", [year, round, type])
}

enum Type {
  SPRINT_QUALIFYING
  SPRINT_RACE
  RACE_QUALIFYING
  RACE
}
